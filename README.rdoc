= README 

== Description

This is the Ruby version of the Challenge[https://github.com/undx/challenge]
project. I implemented this version to show that Ruby shares some idioms and
paradigms with Scala... minus the performances (see Benchmark).


You can have a look at the initial
documentation[https://github.com/undx/challenge/tree/master/doc/index.org] to
see the challenge description and how I realized it.

See also my _Final_ _Thoughts_ at the end of this document.

== Getting started

For running the application, you will need the following requirements :

* Ruby[https://www.ruby-lang.org] in version 2.2 minimum (version recommended 2.3).
* Bundler[http://bundler.io/].

Once, the requirements installed, clone the repository to your computer :

 git clone https://github.com/undx/challenge.rb.git

And then, go to your cloned repository and run the command :

 bundle install

This will install the application dependencies.

You may have to set the executable bit to +bin/challenge+ :
 chmod +x bin/challenge

== Usage

Running the tests :
 bundle exec rspec

Running the tests constantly during development : 
 bundle exec guard

Building the API documentation (available in the +doc+ folder) :
 bundle exec rake rdoc 

Generate the sample datasets :
 bundle exec rake generate_datasets

Running the application :
 bin/challenge -f <input> [ -o <path> -d <dept> -r <r1,r2,..> ] 

Example :
 bin/challenge -f data/large.csv -d HR7 -r A,C -o /home/me/tmp/challenge 


== Benchmark (and performance considerations)

Ruby is a scripting language, the performances that we have with the
application are far away from the Scala implementation.
That's a drawback for the challenge implementation.

Here are the results generated by {+benchmark.rb+}[https://github.com/undx/challenge.rb/blob/master/benchmark.rb]

 Rehearsal ------------------------------------------
 user     system      total        real
 tiny   File processed in 19 ms.
   0.010000   0.010000   0.020000 (  0.019660)
 small  File processed in 84 ms.
   0.080000   0.000000   0.080000 (  0.084424)
 medium File processed in 7197 ms.
   6.910000   0.250000   7.160000 (  7.197783)
 large  File processed in 67610 ms.
  66.420000   0.460000  66.880000 ( 67.611339)
 huge   File processed in 657266 ms.
 645.580000   3.880000 649.460000 (657.276048)
 ------------------------------- total: 723.600000sec

The fact is that Ruby performs better only on very small files (+tiny.csv+ and
+small.csv+), after that, it is behind Scala. Scala version is up to *3*
times faster than the Ruby one.


== Project organization

Application management files : 

* {+Gemfile+}[https://github.com/undx/challenge.rb/blob/master/Gemfile] : Gems (libraries) dependencies.
* {+Rakefile+}[https://github.com/undx/challenge.rb/blob/master/Rakefile] : The build file (like +make+).



==== Tests

I used RSpec[http://rspec.info] for the tests, they are available in the +spec/+ directory :

* {+cli_spec.rb+}[https://github.com/undx/challenge.rb/blob/master/spec/cli_spec.rb] : CLI tests.
* {+worker_spec.rb+}[https://github.com/undx/challenge.rb/blob/master/spec/worker_spec.rb] : Worker tests.

See _Usage_ for running the tests.

==== Code

Sources live in the +lib/+ directory. You'll find the following sources :
* {+challenge.rb+}[https://github.com/undx/challenge.rb/blob/master/lib/challenge.rb] : a module for sharing constants, helpers.
* {+cli.rb+}[https://github.com/undx/challenge.rb/blob/master/lib/cli.rb] : the command-line arguments processor.
* {+worker.rb+}[https://github.com/undx/challenge.rb/blob/master/lib/worker.rb] : the logic part of the application.

There's also a script in the +bin+ directory which acts as a wrapper :

* {+challenge+}[https://github.com/undx/challenge.rb/blob/master/bin/challenge]

See _Usage_ for running the application.

==== API documentation

The API documentation is available in the +doc+ directory.

== Changes

Using Ruby made some little changes to the code but I didn't alter the logical
structure to help you to make the comparison with Scala equivalent code.

You will find methods from the functional area of list (Collections,
Iterables, etc. according the language) processing like map, filter, inject,
reduce, product, etc.

===== Some hints for reading Ruby code

Scala :
 thing.map( x => x * x) 
Ruby :
 thing.map { |x| x * x }
 thing.map do |x|
   x * x
 end

Scala :
 thing.foreach((x: Int) => println(x))
Ruby :
 thing.each do |x|
   puts x
 end

Scala : 
 thing.foldLeft(true)((acc, ex) =>  acc && ex )
 thing.foldLeft(true) { (acc, ex) =>  acc && ex }
Ruby :
 thing.inject(true) { |acc, ex| acc && ex }

Scala :
 thing.map(_.toString)
Ruby :
 thing.map(&:to_s)

...

= Final Thoughts

As I just started Scala, this is a first sight opinion...
Comparing Ruby and Scala leads me to the following findings in one go :
* Code readability and ease of writing are the same for me in both languages. 
* Syntax constructions share some similarities, you're not lost coming from Ruby.
* A strong static type system, with the ease of type inference, helps in detecting bugs and building solid applications.
* They share some same paradigms (OOP/FP) but by it specifications Scala is really a functional language, Ruby has features. 
* simple-build-tool is very nice to use against the side-tools of Ruby.
* Language versions, libraries and libraries dependencies are really really easier to manage with a tool like sbt. 
* Performance is also a huge difference between the two languages...
* Ruby is the successor of Perl, Scala Java's one.
* Ruby is faster for quick'n'dirty and ephemeral needs (open editor, write code, run, trash).
* Scala has a huge ton of libraries as it interops with Java... 

For now, I cannot compare the communities... The community is also an important
point when learning and using a language.
